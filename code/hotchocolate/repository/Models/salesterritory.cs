// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace repository.Models;

/// <summary>
/// Sales territory lookup table.
/// </summary>
[Table("salesterritory", Schema = "sales")]
public partial class salesterritory
{
    /// <summary>
    /// Primary key for SalesTerritory records.
    /// </summary>
    [Key]
    public int territoryid { get; set; }

    /// <summary>
    /// Sales territory description
    /// </summary>
    [Required]
    [StringLength(50)]
    public string name { get; set; }

    /// <summary>
    /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
    /// </summary>
    [Required]
    [StringLength(3)]
    public string countryregioncode { get; set; }

    /// <summary>
    /// Geographic area to which the sales territory belong.
    /// </summary>
    [Required]
    [StringLength(50)]
    public string group { get; set; }

    /// <summary>
    /// Sales in the territory year to date.
    /// </summary>
    public decimal salesytd { get; set; }

    /// <summary>
    /// Sales in the territory the previous year.
    /// </summary>
    public decimal saleslastyear { get; set; }

    /// <summary>
    /// Business costs in the territory year to date.
    /// </summary>
    public decimal costytd { get; set; }

    /// <summary>
    /// Business costs in the territory the previous year.
    /// </summary>
    public decimal costlastyear { get; set; }

    public Guid rowguid { get; set; }

    [Column(TypeName = "timestamp without time zone")]
    public DateTime modifieddate { get; set; }

    [ForeignKey("countryregioncode")]
    [InverseProperty("salesterritories")]
    public virtual countryregion countryregioncodeNavigation { get; set; }

    [InverseProperty("territory")]
    public virtual ICollection<customer> customers { get; set; } = new List<customer>();

    [InverseProperty("territory")]
    public virtual ICollection<salesorderheader> salesorderheaders { get; set; } = new List<salesorderheader>();

    [InverseProperty("territory")]
    public virtual ICollection<salesperson> salespeople { get; set; } = new List<salesperson>();

    [InverseProperty("territory")]
    public virtual ICollection<salesterritoryhistory> salesterritoryhistories { get; set; } = new List<salesterritoryhistory>();

    [InverseProperty("territory")]
    public virtual ICollection<stateprovince> stateprovinces { get; set; } = new List<stateprovince>();
}