// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace repository.Models;

public partial class AdventureworksContext : DbContext
{
    public AdventureworksContext()
    {
    }

    public AdventureworksContext(DbContextOptions<AdventureworksContext> options)
        : base(options)
    {
    }

    public virtual DbSet<address> addresses { get; set; }

    public virtual DbSet<addresstype> addresstypes { get; set; }

    public virtual DbSet<billofmaterial> billofmaterials { get; set; }

    public virtual DbSet<businessentity> businessentities { get; set; }

    public virtual DbSet<businessentityaddress> businessentityaddresses { get; set; }

    public virtual DbSet<businessentitycontact> businessentitycontacts { get; set; }

    public virtual DbSet<contacttype> contacttypes { get; set; }

    public virtual DbSet<countryregion> countryregions { get; set; }

    public virtual DbSet<countryregioncurrency> countryregioncurrencies { get; set; }

    public virtual DbSet<creditcard> creditcards { get; set; }

    public virtual DbSet<culture> cultures { get; set; }

    public virtual DbSet<currency> currencies { get; set; }

    public virtual DbSet<currencyrate> currencyrates { get; set; }

    public virtual DbSet<customer> customers { get; set; }

    public virtual DbSet<department> departments { get; set; }

    public virtual DbSet<document> documents { get; set; }

    public virtual DbSet<emailaddress> emailaddresses { get; set; }

    public virtual DbSet<employee> employees { get; set; }

    public virtual DbSet<employeedepartmenthistory> employeedepartmenthistories { get; set; }

    public virtual DbSet<employeepayhistory> employeepayhistories { get; set; }

    public virtual DbSet<illustration> illustrations { get; set; }

    public virtual DbSet<jobcandidate> jobcandidates { get; set; }

    public virtual DbSet<location> locations { get; set; }

    public virtual DbSet<password> passwords { get; set; }

    public virtual DbSet<person> people { get; set; }

    public virtual DbSet<personcreditcard> personcreditcards { get; set; }

    public virtual DbSet<personphone> personphones { get; set; }

    public virtual DbSet<phonenumbertype> phonenumbertypes { get; set; }

    public virtual DbSet<product> products { get; set; }

    public virtual DbSet<productcategory> productcategories { get; set; }

    public virtual DbSet<productcosthistory> productcosthistories { get; set; }

    public virtual DbSet<productdescription> productdescriptions { get; set; }

    public virtual DbSet<productdocument> productdocuments { get; set; }

    public virtual DbSet<productinventory> productinventories { get; set; }

    public virtual DbSet<productlistpricehistory> productlistpricehistories { get; set; }

    public virtual DbSet<productmodel> productmodels { get; set; }

    public virtual DbSet<productmodelillustration> productmodelillustrations { get; set; }

    public virtual DbSet<productmodelproductdescriptionculture> productmodelproductdescriptioncultures { get; set; }

    public virtual DbSet<productphoto> productphotos { get; set; }

    public virtual DbSet<productproductphoto> productproductphotos { get; set; }

    public virtual DbSet<productreview> productreviews { get; set; }

    public virtual DbSet<productsubcategory> productsubcategories { get; set; }

    public virtual DbSet<productvendor> productvendors { get; set; }

    public virtual DbSet<purchaseorderdetail> purchaseorderdetails { get; set; }

    public virtual DbSet<purchaseorderheader> purchaseorderheaders { get; set; }

    public virtual DbSet<salesorderdetail> salesorderdetails { get; set; }

    public virtual DbSet<salesorderheader> salesorderheaders { get; set; }

    public virtual DbSet<salesorderheadersalesreason> salesorderheadersalesreasons { get; set; }

    public virtual DbSet<salesperson> salespeople { get; set; }

    public virtual DbSet<salespersonquotahistory> salespersonquotahistories { get; set; }

    public virtual DbSet<salesreason> salesreasons { get; set; }

    public virtual DbSet<salestaxrate> salestaxrates { get; set; }

    public virtual DbSet<salesterritory> salesterritories { get; set; }

    public virtual DbSet<salesterritoryhistory> salesterritoryhistories { get; set; }

    public virtual DbSet<scrapreason> scrapreasons { get; set; }

    public virtual DbSet<shift> shifts { get; set; }

    public virtual DbSet<shipmethod> shipmethods { get; set; }

    public virtual DbSet<shoppingcartitem> shoppingcartitems { get; set; }

    public virtual DbSet<specialoffer> specialoffers { get; set; }

    public virtual DbSet<specialofferproduct> specialofferproducts { get; set; }

    public virtual DbSet<stateprovince> stateprovinces { get; set; }

    public virtual DbSet<store> stores { get; set; }

    public virtual DbSet<transactionhistory> transactionhistories { get; set; }

    public virtual DbSet<transactionhistoryarchive> transactionhistoryarchives { get; set; }

    public virtual DbSet<unitmeasure> unitmeasures { get; set; }

    public virtual DbSet<vendor> vendors { get; set; }

    public virtual DbSet<workorder> workorders { get; set; }

    public virtual DbSet<workorderrouting> workorderroutings { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Persist Security Info=True;Password=mysecretpassword;Username=postgres;Database=Adventureworks;Host=localhost");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasPostgresExtension("tablefunc")
            .HasPostgresExtension("uuid-ossp");

        modelBuilder.Entity<address>(entity =>
        {
            entity.HasKey(e => e.addressid).HasName("PK_Address_AddressID");

            entity.ToTable("address", "person", tb => tb.HasComment("Street address information for customers, employees, and vendors."));

            entity.Property(e => e.addressid).HasComment("Primary key for Address records.");
            entity.Property(e => e.addressline1).HasComment("First street address line.");
            entity.Property(e => e.addressline2).HasComment("Second street address line.");
            entity.Property(e => e.city).HasComment("Name of the city.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.postalcode).HasComment("Postal code for the street address.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.spatiallocation).HasComment("Latitude and longitude of this address.");
            entity.Property(e => e.stateprovinceid).HasComment("Unique identification number for the state or province. Foreign key to StateProvince table.");

            entity.HasOne(d => d.stateprovince).WithMany(p => p.addresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Address_StateProvince_StateProvinceID");
        });

        modelBuilder.Entity<addresstype>(entity =>
        {
            entity.HasKey(e => e.addresstypeid).HasName("PK_AddressType_AddressTypeID");

            entity.ToTable("addresstype", "person", tb => tb.HasComment("Types of addresses stored in the Address table."));

            entity.Property(e => e.addresstypeid).HasComment("Primary key for AddressType records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Address type description. For example, Billing, Home, or Shipping.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
        });

        modelBuilder.Entity<billofmaterial>(entity =>
        {
            entity.HasKey(e => e.billofmaterialsid).HasName("PK_BillOfMaterials_BillOfMaterialsID");

            entity.ToTable("billofmaterials", "production", tb => tb.HasComment("Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components."));

            entity.Property(e => e.billofmaterialsid).HasComment("Primary key for BillOfMaterials records.");
            entity.Property(e => e.bomlevel).HasComment("Indicates the depth the component is from its parent (AssemblyID).");
            entity.Property(e => e.componentid).HasComment("Component identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.enddate).HasComment("Date the component stopped being used in the assembly item.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.perassemblyqty)
                .HasDefaultValueSql("1.00")
                .HasComment("Quantity of the component needed to create the assembly.");
            entity.Property(e => e.productassemblyid).HasComment("Parent product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.startdate)
                .HasDefaultValueSql("now()")
                .HasComment("Date the component started being used in the assembly item.");
            entity.Property(e => e.unitmeasurecode)
                .IsFixedLength()
                .HasComment("Standard code identifying the unit of measure for the quantity.");

            entity.HasOne(d => d.component).WithMany(p => p.billofmaterialcomponents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillOfMaterials_Product_ComponentID");

            entity.HasOne(d => d.productassembly).WithMany(p => p.billofmaterialproductassemblies).HasConstraintName("FK_BillOfMaterials_Product_ProductAssemblyID");

            entity.HasOne(d => d.unitmeasurecodeNavigation).WithMany(p => p.billofmaterials)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillOfMaterials_UnitMeasure_UnitMeasureCode");
        });

        modelBuilder.Entity<businessentity>(entity =>
        {
            entity.HasKey(e => e.businessentityid).HasName("PK_BusinessEntity_BusinessEntityID");

            entity.ToTable("businessentity", "person", tb => tb.HasComment("Source of the ID that connects vendors, customers, and employees with address and contact information."));

            entity.Property(e => e.businessentityid).HasComment("Primary key for all customers, vendors, and employees.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
        });

        modelBuilder.Entity<businessentityaddress>(entity =>
        {
            entity.HasKey(e => new { e.businessentityid, e.addressid, e.addresstypeid }).HasName("PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressType");

            entity.ToTable("businessentityaddress", "person", tb => tb.HasComment("Cross-reference table mapping customers, vendors, and employees to their addresses."));

            entity.Property(e => e.businessentityid).HasComment("Primary key. Foreign key to BusinessEntity.BusinessEntityID.");
            entity.Property(e => e.addressid).HasComment("Primary key. Foreign key to Address.AddressID.");
            entity.Property(e => e.addresstypeid).HasComment("Primary key. Foreign key to AddressType.AddressTypeID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");

            entity.HasOne(d => d.address).WithMany(p => p.businessentityaddresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessEntityAddress_Address_AddressID");

            entity.HasOne(d => d.addresstype).WithMany(p => p.businessentityaddresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessEntityAddress_AddressType_AddressTypeID");

            entity.HasOne(d => d.businessentity).WithMany(p => p.businessentityaddresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID");
        });

        modelBuilder.Entity<businessentitycontact>(entity =>
        {
            entity.HasKey(e => new { e.businessentityid, e.personid, e.contacttypeid }).HasName("PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeI");

            entity.ToTable("businessentitycontact", "person", tb => tb.HasComment("Cross-reference table mapping stores, vendors, and employees to people"));

            entity.Property(e => e.businessentityid).HasComment("Primary key. Foreign key to BusinessEntity.BusinessEntityID.");
            entity.Property(e => e.personid).HasComment("Primary key. Foreign key to Person.BusinessEntityID.");
            entity.Property(e => e.contacttypeid).HasComment("Primary key.  Foreign key to ContactType.ContactTypeID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");

            entity.HasOne(d => d.businessentity).WithMany(p => p.businessentitycontacts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessEntityContact_BusinessEntity_BusinessEntityID");

            entity.HasOne(d => d.contacttype).WithMany(p => p.businessentitycontacts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessEntityContact_ContactType_ContactTypeID");

            entity.HasOne(d => d.person).WithMany(p => p.businessentitycontacts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessEntityContact_Person_PersonID");
        });

        modelBuilder.Entity<contacttype>(entity =>
        {
            entity.HasKey(e => e.contacttypeid).HasName("PK_ContactType_ContactTypeID");

            entity.ToTable("contacttype", "person", tb => tb.HasComment("Lookup table containing the types of business entity contacts."));

            entity.Property(e => e.contacttypeid).HasComment("Primary key for ContactType records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Contact type description.");
        });

        modelBuilder.Entity<countryregion>(entity =>
        {
            entity.HasKey(e => e.countryregioncode).HasName("PK_CountryRegion_CountryRegionCode");

            entity.ToTable("countryregion", "person", tb => tb.HasComment("Lookup table containing the ISO standard codes for countries and regions."));

            entity.Property(e => e.countryregioncode).HasComment("ISO standard code for countries and regions.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Country or region name.");
        });

        modelBuilder.Entity<countryregioncurrency>(entity =>
        {
            entity.HasKey(e => new { e.countryregioncode, e.currencycode }).HasName("PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode");

            entity.ToTable("countryregioncurrency", "sales", tb => tb.HasComment("Cross-reference table mapping ISO currency codes to a country or region."));

            entity.Property(e => e.countryregioncode).HasComment("ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.");
            entity.Property(e => e.currencycode)
                .IsFixedLength()
                .HasComment("ISO standard currency code. Foreign key to Currency.CurrencyCode.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");

            entity.HasOne(d => d.countryregioncodeNavigation).WithMany(p => p.countryregioncurrencies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CountryRegionCurrency_CountryRegion_CountryRegionCode");

            entity.HasOne(d => d.currencycodeNavigation).WithMany(p => p.countryregioncurrencies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CountryRegionCurrency_Currency_CurrencyCode");
        });

        modelBuilder.Entity<creditcard>(entity =>
        {
            entity.HasKey(e => e.creditcardid).HasName("PK_CreditCard_CreditCardID");

            entity.ToTable("creditcard", "sales", tb => tb.HasComment("Customer credit card information."));

            entity.Property(e => e.creditcardid).HasComment("Primary key for CreditCard records.");
            entity.Property(e => e.cardnumber).HasComment("Credit card number.");
            entity.Property(e => e.cardtype).HasComment("Credit card name.");
            entity.Property(e => e.expmonth).HasComment("Credit card expiration month.");
            entity.Property(e => e.expyear).HasComment("Credit card expiration year.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
        });

        modelBuilder.Entity<culture>(entity =>
        {
            entity.HasKey(e => e.cultureid).HasName("PK_Culture_CultureID");

            entity.ToTable("culture", "production", tb => tb.HasComment("Lookup table containing the languages in which some AdventureWorks data is stored."));

            entity.Property(e => e.cultureid)
                .IsFixedLength()
                .HasComment("Primary key for Culture records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Culture description.");
        });

        modelBuilder.Entity<currency>(entity =>
        {
            entity.HasKey(e => e.currencycode).HasName("PK_Currency_CurrencyCode");

            entity.ToTable("currency", "sales", tb => tb.HasComment("Lookup table containing standard ISO currencies."));

            entity.Property(e => e.currencycode)
                .IsFixedLength()
                .HasComment("The ISO code for the Currency.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Currency name.");
        });

        modelBuilder.Entity<currencyrate>(entity =>
        {
            entity.HasKey(e => e.currencyrateid).HasName("PK_CurrencyRate_CurrencyRateID");

            entity.ToTable("currencyrate", "sales", tb => tb.HasComment("Currency exchange rates."));

            entity.Property(e => e.currencyrateid).HasComment("Primary key for CurrencyRate records.");
            entity.Property(e => e.averagerate).HasComment("Average exchange rate for the day.");
            entity.Property(e => e.currencyratedate).HasComment("Date and time the exchange rate was obtained.");
            entity.Property(e => e.endofdayrate).HasComment("Final exchange rate for the day.");
            entity.Property(e => e.fromcurrencycode)
                .IsFixedLength()
                .HasComment("Exchange rate was converted from this currency code.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.tocurrencycode)
                .IsFixedLength()
                .HasComment("Exchange rate was converted to this currency code.");

            entity.HasOne(d => d.fromcurrencycodeNavigation).WithMany(p => p.currencyratefromcurrencycodeNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CurrencyRate_Currency_FromCurrencyCode");

            entity.HasOne(d => d.tocurrencycodeNavigation).WithMany(p => p.currencyratetocurrencycodeNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CurrencyRate_Currency_ToCurrencyCode");
        });

        modelBuilder.Entity<customer>(entity =>
        {
            entity.HasKey(e => e.customerid).HasName("PK_Customer_CustomerID");

            entity.ToTable("customer", "sales", tb => tb.HasComment("Current customer information. Also see the Person and Store tables."));

            entity.Property(e => e.customerid).HasComment("Primary key.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.personid).HasComment("Foreign key to Person.BusinessEntityID");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.storeid).HasComment("Foreign key to Store.BusinessEntityID");
            entity.Property(e => e.territoryid).HasComment("ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.");

            entity.HasOne(d => d.person).WithMany(p => p.customers).HasConstraintName("FK_Customer_Person_PersonID");

            entity.HasOne(d => d.store).WithMany(p => p.customers).HasConstraintName("FK_Customer_Store_StoreID");

            entity.HasOne(d => d.territory).WithMany(p => p.customers).HasConstraintName("FK_Customer_SalesTerritory_TerritoryID");
        });

        modelBuilder.Entity<department>(entity =>
        {
            entity.HasKey(e => e.departmentid).HasName("PK_Department_DepartmentID");

            entity.ToTable("department", "humanresources", tb => tb.HasComment("Lookup table containing the departments within the Adventure Works Cycles company."));

            entity.Property(e => e.departmentid).HasComment("Primary key for Department records.");
            entity.Property(e => e.groupname).HasComment("Name of the group to which the department belongs.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Name of the department.");
        });

        modelBuilder.Entity<document>(entity =>
        {
            entity.HasKey(e => e.documentnode).HasName("PK_Document_DocumentNode");

            entity.ToTable("document", "production", tb => tb.HasComment("Product maintenance documents."));

            entity.Property(e => e.documentnode)
                .HasDefaultValueSql("'/'::character varying")
                .HasComment("Primary key for Document records.");
            entity.Property(e => e.changenumber)
                .HasDefaultValue(0)
                .HasComment("Engineering change approval number.");
            entity.Property(e => e.document1).HasComment("Complete document.");
            entity.Property(e => e.documentsummary).HasComment("Document abstract.");
            entity.Property(e => e.fileextension).HasComment("File extension indicating the document type. For example, .doc or .txt.");
            entity.Property(e => e.filename).HasComment("File name of the document");
            entity.Property(e => e.folderflag)
                .HasDefaultValue(false)
                .HasComment("0 = This is a folder, 1 = This is a document.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.owner).HasComment("Employee who controls the document.  Foreign key to Employee.BusinessEntityID");
            entity.Property(e => e.revision)
                .IsFixedLength()
                .HasComment("Revision number of the document.");
            entity.Property(e => e.rowguid)
                .HasDefaultValueSql("uuid_generate_v1()")
                .HasComment("ROWGUIDCOL number uniquely identifying the record. Required for FileStream.");
            entity.Property(e => e.status).HasComment("1 = Pending approval, 2 = Approved, 3 = Obsolete");
            entity.Property(e => e.title).HasComment("Title of the document.");

            entity.HasOne(d => d.ownerNavigation).WithMany(p => p.documents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Document_Employee_Owner");
        });

        modelBuilder.Entity<emailaddress>(entity =>
        {
            entity.HasKey(e => new { e.businessentityid, e.emailaddressid }).HasName("PK_EmailAddress_BusinessEntityID_EmailAddressID");

            entity.ToTable("emailaddress", "person", tb => tb.HasComment("Where to send a person email."));

            entity.Property(e => e.businessentityid).HasComment("Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID");
            entity.Property(e => e.emailaddressid)
                .ValueGeneratedOnAdd()
                .HasComment("Primary key. ID of this email address.");
            entity.Property(e => e.emailaddress1).HasComment("E-mail address for the person.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");

            entity.HasOne(d => d.businessentity).WithMany(p => p.emailaddresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailAddress_Person_BusinessEntityID");
        });

        modelBuilder.Entity<employee>(entity =>
        {
            entity.HasKey(e => e.businessentityid).HasName("PK_Employee_BusinessEntityID");

            entity.ToTable("employee", "humanresources", tb => tb.HasComment("Employee information such as salary, department, and title."));

            entity.Property(e => e.businessentityid)
                .ValueGeneratedNever()
                .HasComment("Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.");
            entity.Property(e => e.birthdate).HasComment("Date of birth.");
            entity.Property(e => e.currentflag)
                .HasDefaultValue(true)
                .HasComment("0 = Inactive, 1 = Active");
            entity.Property(e => e.gender).HasComment("M = Male, F = Female");
            entity.Property(e => e.hiredate).HasComment("Employee hired on this date.");
            entity.Property(e => e.jobtitle).HasComment("Work title such as Buyer or Sales Representative.");
            entity.Property(e => e.loginid).HasComment("Network login.");
            entity.Property(e => e.maritalstatus).HasComment("M = Married, S = Single");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.nationalidnumber).HasComment("Unique national identification number such as a social security number.");
            entity.Property(e => e.organizationnode)
                .HasDefaultValueSql("'/'::character varying")
                .HasComment("Where the employee is located in corporate hierarchy.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.salariedflag)
                .HasDefaultValue(true)
                .HasComment("Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.");
            entity.Property(e => e.sickleavehours)
                .HasDefaultValue((short)0)
                .HasComment("Number of available sick leave hours.");
            entity.Property(e => e.vacationhours)
                .HasDefaultValue((short)0)
                .HasComment("Number of available vacation hours.");

            entity.HasOne(d => d.businessentity).WithOne(p => p.employee)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employee_Person_BusinessEntityID");
        });

        modelBuilder.Entity<employeedepartmenthistory>(entity =>
        {
            entity.HasKey(e => new { e.businessentityid, e.startdate, e.departmentid, e.shiftid }).HasName("PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_Departm");

            entity.ToTable("employeedepartmenthistory", "humanresources", tb => tb.HasComment("Employee department transfers."));

            entity.Property(e => e.businessentityid).HasComment("Employee identification number. Foreign key to Employee.BusinessEntityID.");
            entity.Property(e => e.startdate).HasComment("Date the employee started work in the department.");
            entity.Property(e => e.departmentid).HasComment("Department in which the employee worked including currently. Foreign key to Department.DepartmentID.");
            entity.Property(e => e.shiftid).HasComment("Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.");
            entity.Property(e => e.enddate).HasComment("Date the employee left the department. NULL = Current department.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");

            entity.HasOne(d => d.businessentity).WithMany(p => p.employeedepartmenthistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeDepartmentHistory_Employee_BusinessEntityID");

            entity.HasOne(d => d.department).WithMany(p => p.employeedepartmenthistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeDepartmentHistory_Department_DepartmentID");

            entity.HasOne(d => d.shift).WithMany(p => p.employeedepartmenthistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeDepartmentHistory_Shift_ShiftID");
        });

        modelBuilder.Entity<employeepayhistory>(entity =>
        {
            entity.HasKey(e => new { e.businessentityid, e.ratechangedate }).HasName("PK_EmployeePayHistory_BusinessEntityID_RateChangeDate");

            entity.ToTable("employeepayhistory", "humanresources", tb => tb.HasComment("Employee pay history."));

            entity.Property(e => e.businessentityid).HasComment("Employee identification number. Foreign key to Employee.BusinessEntityID.");
            entity.Property(e => e.ratechangedate).HasComment("Date the change in pay is effective");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.payfrequency).HasComment("1 = Salary received monthly, 2 = Salary received biweekly");
            entity.Property(e => e.rate).HasComment("Salary hourly rate.");

            entity.HasOne(d => d.businessentity).WithMany(p => p.employeepayhistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeePayHistory_Employee_BusinessEntityID");
        });

        modelBuilder.Entity<illustration>(entity =>
        {
            entity.HasKey(e => e.illustrationid).HasName("PK_Illustration_IllustrationID");

            entity.ToTable("illustration", "production", tb => tb.HasComment("Bicycle assembly diagrams."));

            entity.Property(e => e.illustrationid).HasComment("Primary key for Illustration records.");
            entity.Property(e => e.diagram).HasComment("Illustrations used in manufacturing instructions. Stored as XML.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
        });

        modelBuilder.Entity<jobcandidate>(entity =>
        {
            entity.HasKey(e => e.jobcandidateid).HasName("PK_JobCandidate_JobCandidateID");

            entity.ToTable("jobcandidate", "humanresources", tb => tb.HasComment("RÃ©sumÃ©s submitted to Human Resources by job applicants."));

            entity.Property(e => e.jobcandidateid).HasComment("Primary key for JobCandidate records.");
            entity.Property(e => e.businessentityid).HasComment("Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.resume).HasComment("RÃ©sumÃ© in XML format.");

            entity.HasOne(d => d.businessentity).WithMany(p => p.jobcandidates).HasConstraintName("FK_JobCandidate_Employee_BusinessEntityID");
        });

        modelBuilder.Entity<location>(entity =>
        {
            entity.HasKey(e => e.locationid).HasName("PK_Location_LocationID");

            entity.ToTable("location", "production", tb => tb.HasComment("Product inventory and manufacturing locations."));

            entity.Property(e => e.locationid).HasComment("Primary key for Location records.");
            entity.Property(e => e.availability)
                .HasDefaultValueSql("0.00")
                .HasComment("Work capacity (in hours) of the manufacturing location.");
            entity.Property(e => e.costrate)
                .HasDefaultValueSql("0.00")
                .HasComment("Standard hourly cost of the manufacturing location.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Location description.");
        });

        modelBuilder.Entity<password>(entity =>
        {
            entity.HasKey(e => e.businessentityid).HasName("PK_Password_BusinessEntityID");

            entity.ToTable("password", "person", tb => tb.HasComment("One way hashed authentication information"));

            entity.Property(e => e.businessentityid).ValueGeneratedNever();
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.passwordhash).HasComment("Password for the e-mail account.");
            entity.Property(e => e.passwordsalt).HasComment("Random value concatenated with the password string before the password is hashed.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");

            entity.HasOne(d => d.businessentity).WithOne(p => p.password)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Password_Person_BusinessEntityID");
        });

        modelBuilder.Entity<person>(entity =>
        {
            entity.HasKey(e => e.businessentityid).HasName("PK_Person_BusinessEntityID");

            entity.ToTable("person", "person", tb => tb.HasComment("Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts."));

            entity.Property(e => e.businessentityid)
                .ValueGeneratedNever()
                .HasComment("Primary key for Person records.");
            entity.Property(e => e.additionalcontactinfo).HasComment("Additional contact information about the person stored in xml format.");
            entity.Property(e => e.demographics).HasComment("Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.");
            entity.Property(e => e.emailpromotion)
                .HasDefaultValue(0)
                .HasComment("0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.");
            entity.Property(e => e.firstname).HasComment("First name of the person.");
            entity.Property(e => e.lastname).HasComment("Last name of the person.");
            entity.Property(e => e.middlename).HasComment("Middle name or middle initial of the person.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.namestyle)
                .HasDefaultValue(false)
                .HasComment("0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.");
            entity.Property(e => e.persontype)
                .IsFixedLength()
                .HasComment("Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.suffix).HasComment("Surname suffix. For example, Sr. or Jr.");
            entity.Property(e => e.title).HasComment("A courtesy title. For example, Mr. or Ms.");

            entity.HasOne(d => d.businessentity).WithOne(p => p.person)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Person_BusinessEntity_BusinessEntityID");
        });

        modelBuilder.Entity<personcreditcard>(entity =>
        {
            entity.HasKey(e => new { e.businessentityid, e.creditcardid }).HasName("PK_PersonCreditCard_BusinessEntityID_CreditCardID");

            entity.ToTable("personcreditcard", "sales", tb => tb.HasComment("Cross-reference table mapping people to their credit card information in the CreditCard table."));

            entity.Property(e => e.businessentityid).HasComment("Business entity identification number. Foreign key to Person.BusinessEntityID.");
            entity.Property(e => e.creditcardid).HasComment("Credit card identification number. Foreign key to CreditCard.CreditCardID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");

            entity.HasOne(d => d.businessentity).WithMany(p => p.personcreditcards)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PersonCreditCard_Person_BusinessEntityID");

            entity.HasOne(d => d.creditcard).WithMany(p => p.personcreditcards)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PersonCreditCard_CreditCard_CreditCardID");
        });

        modelBuilder.Entity<personphone>(entity =>
        {
            entity.HasKey(e => new { e.businessentityid, e.phonenumber, e.phonenumbertypeid }).HasName("PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID");

            entity.ToTable("personphone", "person", tb => tb.HasComment("Telephone number and type of a person."));

            entity.Property(e => e.businessentityid).HasComment("Business entity identification number. Foreign key to Person.BusinessEntityID.");
            entity.Property(e => e.phonenumber).HasComment("Telephone number identification number.");
            entity.Property(e => e.phonenumbertypeid).HasComment("Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");

            entity.HasOne(d => d.businessentity).WithMany(p => p.personphones)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PersonPhone_Person_BusinessEntityID");

            entity.HasOne(d => d.phonenumbertype).WithMany(p => p.personphones)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID");
        });

        modelBuilder.Entity<phonenumbertype>(entity =>
        {
            entity.HasKey(e => e.phonenumbertypeid).HasName("PK_PhoneNumberType_PhoneNumberTypeID");

            entity.ToTable("phonenumbertype", "person", tb => tb.HasComment("Type of phone number of a person."));

            entity.Property(e => e.phonenumbertypeid).HasComment("Primary key for telephone number type records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Name of the telephone number type");
        });

        modelBuilder.Entity<product>(entity =>
        {
            entity.HasKey(e => e.productid).HasName("PK_Product_ProductID");

            entity.ToTable("product", "production", tb => tb.HasComment("Products sold or used in the manfacturing of sold products."));

            entity.Property(e => e.productid).HasComment("Primary key for Product records.");
            entity.Property(e => e._class)
                .IsFixedLength()
                .HasComment("H = High, M = Medium, L = Low");
            entity.Property(e => e.color).HasComment("Product color.");
            entity.Property(e => e.daystomanufacture).HasComment("Number of days required to manufacture the product.");
            entity.Property(e => e.discontinueddate).HasComment("Date the product was discontinued.");
            entity.Property(e => e.finishedgoodsflag)
                .HasDefaultValue(true)
                .HasComment("0 = Product is not a salable item. 1 = Product is salable.");
            entity.Property(e => e.listprice).HasComment("Selling price.");
            entity.Property(e => e.makeflag)
                .HasDefaultValue(true)
                .HasComment("0 = Product is purchased, 1 = Product is manufactured in-house.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Name of the product.");
            entity.Property(e => e.productline)
                .IsFixedLength()
                .HasComment("R = Road, M = Mountain, T = Touring, S = Standard");
            entity.Property(e => e.productmodelid).HasComment("Product is a member of this product model. Foreign key to ProductModel.ProductModelID.");
            entity.Property(e => e.productnumber).HasComment("Unique product identification number.");
            entity.Property(e => e.productsubcategoryid).HasComment("Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.");
            entity.Property(e => e.reorderpoint).HasComment("Inventory level that triggers a purchase order or work order.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.safetystocklevel).HasComment("Minimum inventory quantity.");
            entity.Property(e => e.sellenddate).HasComment("Date the product was no longer available for sale.");
            entity.Property(e => e.sellstartdate).HasComment("Date the product was available for sale.");
            entity.Property(e => e.size).HasComment("Product size.");
            entity.Property(e => e.sizeunitmeasurecode)
                .IsFixedLength()
                .HasComment("Unit of measure for Size column.");
            entity.Property(e => e.standardcost).HasComment("Standard cost of the product.");
            entity.Property(e => e.style)
                .IsFixedLength()
                .HasComment("W = Womens, M = Mens, U = Universal");
            entity.Property(e => e.weight).HasComment("Product weight.");
            entity.Property(e => e.weightunitmeasurecode)
                .IsFixedLength()
                .HasComment("Unit of measure for Weight column.");

            entity.HasOne(d => d.productmodel).WithMany(p => p.products).HasConstraintName("FK_Product_ProductModel_ProductModelID");

            entity.HasOne(d => d.productsubcategory).WithMany(p => p.products).HasConstraintName("FK_Product_ProductSubcategory_ProductSubcategoryID");

            entity.HasOne(d => d.sizeunitmeasurecodeNavigation).WithMany(p => p.productsizeunitmeasurecodeNavigations).HasConstraintName("FK_Product_UnitMeasure_SizeUnitMeasureCode");

            entity.HasOne(d => d.weightunitmeasurecodeNavigation).WithMany(p => p.productweightunitmeasurecodeNavigations).HasConstraintName("FK_Product_UnitMeasure_WeightUnitMeasureCode");
        });

        modelBuilder.Entity<productcategory>(entity =>
        {
            entity.HasKey(e => e.productcategoryid).HasName("PK_ProductCategory_ProductCategoryID");

            entity.ToTable("productcategory", "production", tb => tb.HasComment("High-level product categorization."));

            entity.Property(e => e.productcategoryid).HasComment("Primary key for ProductCategory records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Category description.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
        });

        modelBuilder.Entity<productcosthistory>(entity =>
        {
            entity.HasKey(e => new { e.productid, e.startdate }).HasName("PK_ProductCostHistory_ProductID_StartDate");

            entity.ToTable("productcosthistory", "production", tb => tb.HasComment("Changes in the cost of a product over time."));

            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID");
            entity.Property(e => e.startdate).HasComment("Product cost start date.");
            entity.Property(e => e.enddate).HasComment("Product cost end date.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.standardcost).HasComment("Standard cost of the product.");

            entity.HasOne(d => d.product).WithMany(p => p.productcosthistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductCostHistory_Product_ProductID");
        });

        modelBuilder.Entity<productdescription>(entity =>
        {
            entity.HasKey(e => e.productdescriptionid).HasName("PK_ProductDescription_ProductDescriptionID");

            entity.ToTable("productdescription", "production", tb => tb.HasComment("Product descriptions in several languages."));

            entity.Property(e => e.productdescriptionid).HasComment("Primary key for ProductDescription records.");
            entity.Property(e => e.description).HasComment("Description of the product.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
        });

        modelBuilder.Entity<productdocument>(entity =>
        {
            entity.HasKey(e => new { e.productid, e.documentnode }).HasName("PK_ProductDocument_ProductID_DocumentNode");

            entity.ToTable("productdocument", "production", tb => tb.HasComment("Cross-reference table mapping products to related product documents."));

            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.documentnode)
                .HasDefaultValueSql("'/'::character varying")
                .HasComment("Document identification number. Foreign key to Document.DocumentNode.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");

            entity.HasOne(d => d.documentnodeNavigation).WithMany(p => p.productdocuments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductDocument_Document_DocumentNode");

            entity.HasOne(d => d.product).WithMany(p => p.productdocuments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductDocument_Product_ProductID");
        });

        modelBuilder.Entity<productinventory>(entity =>
        {
            entity.HasKey(e => new { e.productid, e.locationid }).HasName("PK_ProductInventory_ProductID_LocationID");

            entity.ToTable("productinventory", "production", tb => tb.HasComment("Product inventory information."));

            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.locationid).HasComment("Inventory location identification number. Foreign key to Location.LocationID.");
            entity.Property(e => e.bin).HasComment("Storage container on a shelf in an inventory location.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.quantity)
                .HasDefaultValue((short)0)
                .HasComment("Quantity of products in the inventory location.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.shelf).HasComment("Storage compartment within an inventory location.");

            entity.HasOne(d => d.location).WithMany(p => p.productinventories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductInventory_Location_LocationID");

            entity.HasOne(d => d.product).WithMany(p => p.productinventories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductInventory_Product_ProductID");
        });

        modelBuilder.Entity<productlistpricehistory>(entity =>
        {
            entity.HasKey(e => new { e.productid, e.startdate }).HasName("PK_ProductListPriceHistory_ProductID_StartDate");

            entity.ToTable("productlistpricehistory", "production", tb => tb.HasComment("Changes in the list price of a product over time."));

            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID");
            entity.Property(e => e.startdate).HasComment("List price start date.");
            entity.Property(e => e.enddate).HasComment("List price end date");
            entity.Property(e => e.listprice).HasComment("Product list price.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");

            entity.HasOne(d => d.product).WithMany(p => p.productlistpricehistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductListPriceHistory_Product_ProductID");
        });

        modelBuilder.Entity<productmodel>(entity =>
        {
            entity.HasKey(e => e.productmodelid).HasName("PK_ProductModel_ProductModelID");

            entity.ToTable("productmodel", "production", tb => tb.HasComment("Product model classification."));

            entity.Property(e => e.productmodelid).HasComment("Primary key for ProductModel records.");
            entity.Property(e => e.catalogdescription).HasComment("Detailed product catalog information in xml format.");
            entity.Property(e => e.instructions).HasComment("Manufacturing instructions in xml format.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Product model description.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
        });

        modelBuilder.Entity<productmodelillustration>(entity =>
        {
            entity.HasKey(e => new { e.productmodelid, e.illustrationid }).HasName("PK_ProductModelIllustration_ProductModelID_IllustrationID");

            entity.ToTable("productmodelillustration", "production", tb => tb.HasComment("Cross-reference table mapping product models and illustrations."));

            entity.Property(e => e.productmodelid).HasComment("Primary key. Foreign key to ProductModel.ProductModelID.");
            entity.Property(e => e.illustrationid).HasComment("Primary key. Foreign key to Illustration.IllustrationID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");

            entity.HasOne(d => d.illustration).WithMany(p => p.productmodelillustrations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductModelIllustration_Illustration_IllustrationID");

            entity.HasOne(d => d.productmodel).WithMany(p => p.productmodelillustrations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductModelIllustration_ProductModel_ProductModelID");
        });

        modelBuilder.Entity<productmodelproductdescriptionculture>(entity =>
        {
            entity.HasKey(e => new { e.productmodelid, e.productdescriptionid, e.cultureid }).HasName("PK_ProductModelProductDescriptionCulture_ProductModelID_Product");

            entity.ToTable("productmodelproductdescriptionculture", "production", tb => tb.HasComment("Cross-reference table mapping product descriptions and the language the description is written in."));

            entity.Property(e => e.productmodelid).HasComment("Primary key. Foreign key to ProductModel.ProductModelID.");
            entity.Property(e => e.productdescriptionid).HasComment("Primary key. Foreign key to ProductDescription.ProductDescriptionID.");
            entity.Property(e => e.cultureid)
                .IsFixedLength()
                .HasComment("Culture identification number. Foreign key to Culture.CultureID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");

            entity.HasOne(d => d.culture).WithMany(p => p.productmodelproductdescriptioncultures)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductModelProductDescriptionCulture_Culture_CultureID");

            entity.HasOne(d => d.productdescription).WithMany(p => p.productmodelproductdescriptioncultures)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductModelProductDescriptionCulture_ProductDescription_Pro");

            entity.HasOne(d => d.productmodel).WithMany(p => p.productmodelproductdescriptioncultures)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductModelProductDescriptionCulture_ProductModel_ProductMo");
        });

        modelBuilder.Entity<productphoto>(entity =>
        {
            entity.HasKey(e => e.productphotoid).HasName("PK_ProductPhoto_ProductPhotoID");

            entity.ToTable("productphoto", "production", tb => tb.HasComment("Product images."));

            entity.Property(e => e.productphotoid).HasComment("Primary key for ProductPhoto records.");
            entity.Property(e => e.largephoto).HasComment("Large image of the product.");
            entity.Property(e => e.largephotofilename).HasComment("Large image file name.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.thumbnailphoto).HasComment("Small image of the product.");
            entity.Property(e => e.thumbnailphotofilename).HasComment("Small image file name.");
        });

        modelBuilder.Entity<productproductphoto>(entity =>
        {
            entity.HasKey(e => new { e.productid, e.productphotoid }).HasName("PK_ProductProductPhoto_ProductID_ProductPhotoID");

            entity.ToTable("productproductphoto", "production", tb => tb.HasComment("Cross-reference table mapping products and product photos."));

            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.productphotoid).HasComment("Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.primary)
                .HasDefaultValue(false)
                .HasComment("0 = Photo is not the principal image. 1 = Photo is the principal image.");

            entity.HasOne(d => d.product).WithMany(p => p.productproductphotos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductProductPhoto_Product_ProductID");

            entity.HasOne(d => d.productphoto).WithMany(p => p.productproductphotos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductProductPhoto_ProductPhoto_ProductPhotoID");
        });

        modelBuilder.Entity<productreview>(entity =>
        {
            entity.HasKey(e => e.productreviewid).HasName("PK_ProductReview_ProductReviewID");

            entity.ToTable("productreview", "production", tb => tb.HasComment("Customer reviews of products they have purchased."));

            entity.Property(e => e.productreviewid).HasComment("Primary key for ProductReview records.");
            entity.Property(e => e.comments).HasComment("Reviewer's comments");
            entity.Property(e => e.emailaddress).HasComment("Reviewer's e-mail address.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.rating).HasComment("Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.");
            entity.Property(e => e.reviewdate)
                .HasDefaultValueSql("now()")
                .HasComment("Date review was submitted.");
            entity.Property(e => e.reviewername).HasComment("Name of the reviewer.");

            entity.HasOne(d => d.product).WithMany(p => p.productreviews)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductReview_Product_ProductID");
        });

        modelBuilder.Entity<productsubcategory>(entity =>
        {
            entity.HasKey(e => e.productsubcategoryid).HasName("PK_ProductSubcategory_ProductSubcategoryID");

            entity.ToTable("productsubcategory", "production", tb => tb.HasComment("Product subcategories. See ProductCategory table."));

            entity.Property(e => e.productsubcategoryid).HasComment("Primary key for ProductSubcategory records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Subcategory description.");
            entity.Property(e => e.productcategoryid).HasComment("Product category identification number. Foreign key to ProductCategory.ProductCategoryID.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");

            entity.HasOne(d => d.productcategory).WithMany(p => p.productsubcategories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductSubcategory_ProductCategory_ProductCategoryID");
        });

        modelBuilder.Entity<productvendor>(entity =>
        {
            entity.HasKey(e => new { e.productid, e.businessentityid }).HasName("PK_ProductVendor_ProductID_BusinessEntityID");

            entity.ToTable("productvendor", "purchasing", tb => tb.HasComment("Cross-reference table mapping vendors with the products they supply."));

            entity.Property(e => e.productid).HasComment("Primary key. Foreign key to Product.ProductID.");
            entity.Property(e => e.businessentityid).HasComment("Primary key. Foreign key to Vendor.BusinessEntityID.");
            entity.Property(e => e.averageleadtime).HasComment("The average span of time (in days) between placing an order with the vendor and receiving the purchased product.");
            entity.Property(e => e.lastreceiptcost).HasComment("The selling price when last purchased.");
            entity.Property(e => e.lastreceiptdate).HasComment("Date the product was last received by the vendor.");
            entity.Property(e => e.maxorderqty).HasComment("The minimum quantity that should be ordered.");
            entity.Property(e => e.minorderqty).HasComment("The maximum quantity that should be ordered.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.onorderqty).HasComment("The quantity currently on order.");
            entity.Property(e => e.standardprice).HasComment("The vendor's usual selling price.");
            entity.Property(e => e.unitmeasurecode)
                .IsFixedLength()
                .HasComment("The product's unit of measure.");

            entity.HasOne(d => d.businessentity).WithMany(p => p.productvendors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductVendor_Vendor_BusinessEntityID");

            entity.HasOne(d => d.product).WithMany(p => p.productvendors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductVendor_Product_ProductID");

            entity.HasOne(d => d.unitmeasurecodeNavigation).WithMany(p => p.productvendors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductVendor_UnitMeasure_UnitMeasureCode");
        });

        modelBuilder.Entity<purchaseorderdetail>(entity =>
        {
            entity.HasKey(e => new { e.purchaseorderid, e.purchaseorderdetailid }).HasName("PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID");

            entity.ToTable("purchaseorderdetail", "purchasing", tb => tb.HasComment("Individual products associated with a specific purchase order. See PurchaseOrderHeader."));

            entity.Property(e => e.purchaseorderid).HasComment("Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.");
            entity.Property(e => e.purchaseorderdetailid)
                .ValueGeneratedOnAdd()
                .HasComment("Primary key. One line number per purchased product.");
            entity.Property(e => e.duedate).HasComment("Date the product is expected to be received.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.orderqty).HasComment("Quantity ordered.");
            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.receivedqty).HasComment("Quantity actually received from the vendor.");
            entity.Property(e => e.rejectedqty).HasComment("Quantity rejected during inspection.");
            entity.Property(e => e.unitprice).HasComment("Vendor's selling price of a single product.");

            entity.HasOne(d => d.product).WithMany(p => p.purchaseorderdetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderDetail_Product_ProductID");

            entity.HasOne(d => d.purchaseorder).WithMany(p => p.purchaseorderdetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID");
        });

        modelBuilder.Entity<purchaseorderheader>(entity =>
        {
            entity.HasKey(e => e.purchaseorderid).HasName("PK_PurchaseOrderHeader_PurchaseOrderID");

            entity.ToTable("purchaseorderheader", "purchasing", tb => tb.HasComment("General purchase order information. See PurchaseOrderDetail."));

            entity.Property(e => e.purchaseorderid).HasComment("Primary key.");
            entity.Property(e => e.employeeid).HasComment("Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.");
            entity.Property(e => e.freight)
                .HasDefaultValueSql("0.00")
                .HasComment("Shipping cost.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.orderdate)
                .HasDefaultValueSql("now()")
                .HasComment("Purchase order creation date.");
            entity.Property(e => e.revisionnumber)
                .HasDefaultValue((short)0)
                .HasComment("Incremental number to track changes to the purchase order over time.");
            entity.Property(e => e.shipdate).HasComment("Estimated shipment date from the vendor.");
            entity.Property(e => e.shipmethodid).HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.");
            entity.Property(e => e.status)
                .HasDefaultValue((short)1)
                .HasComment("Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete");
            entity.Property(e => e.subtotal)
                .HasDefaultValueSql("0.00")
                .HasComment("Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.");
            entity.Property(e => e.taxamt)
                .HasDefaultValueSql("0.00")
                .HasComment("Tax amount.");
            entity.Property(e => e.vendorid).HasComment("Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.");

            entity.HasOne(d => d.employee).WithMany(p => p.purchaseorderheaders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderHeader_Employee_EmployeeID");

            entity.HasOne(d => d.shipmethod).WithMany(p => p.purchaseorderheaders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderHeader_ShipMethod_ShipMethodID");

            entity.HasOne(d => d.vendor).WithMany(p => p.purchaseorderheaders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderHeader_Vendor_VendorID");
        });

        modelBuilder.Entity<salesorderdetail>(entity =>
        {
            entity.HasKey(e => new { e.salesorderid, e.salesorderdetailid }).HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

            entity.ToTable("salesorderdetail", "sales", tb => tb.HasComment("Individual products associated with a specific sales order. See SalesOrderHeader."));

            entity.Property(e => e.salesorderid).HasComment("Primary key. Foreign key to SalesOrderHeader.SalesOrderID.");
            entity.Property(e => e.salesorderdetailid)
                .ValueGeneratedOnAdd()
                .HasComment("Primary key. One incremental unique number per product sold.");
            entity.Property(e => e.carriertrackingnumber).HasComment("Shipment tracking number supplied by the shipper.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.orderqty).HasComment("Quantity ordered per product.");
            entity.Property(e => e.productid).HasComment("Product sold to customer. Foreign key to Product.ProductID.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.specialofferid).HasComment("Promotional code. Foreign key to SpecialOffer.SpecialOfferID.");
            entity.Property(e => e.unitprice).HasComment("Selling price of a single product.");
            entity.Property(e => e.unitpricediscount).HasComment("Discount amount.");

            entity.HasOne(d => d.salesorder).WithMany(p => p.salesorderdetails).HasConstraintName("FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID");

            entity.HasOne(d => d.specialofferproduct).WithMany(p => p.salesorderdetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID");
        });

        modelBuilder.Entity<salesorderheader>(entity =>
        {
            entity.HasKey(e => e.salesorderid).HasName("PK_SalesOrderHeader_SalesOrderID");

            entity.ToTable("salesorderheader", "sales", tb => tb.HasComment("General sales order information."));

            entity.Property(e => e.salesorderid).HasComment("Primary key.");
            entity.Property(e => e.accountnumber).HasComment("Financial accounting number reference.");
            entity.Property(e => e.billtoaddressid).HasComment("Customer billing address. Foreign key to Address.AddressID.");
            entity.Property(e => e.comment).HasComment("Sales representative comments.");
            entity.Property(e => e.creditcardapprovalcode).HasComment("Approval code provided by the credit card company.");
            entity.Property(e => e.creditcardid).HasComment("Credit card identification number. Foreign key to CreditCard.CreditCardID.");
            entity.Property(e => e.currencyrateid).HasComment("Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.");
            entity.Property(e => e.customerid).HasComment("Customer identification number. Foreign key to Customer.BusinessEntityID.");
            entity.Property(e => e.duedate).HasComment("Date the order is due to the customer.");
            entity.Property(e => e.freight)
                .HasDefaultValueSql("0.00")
                .HasComment("Shipping cost.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.onlineorderflag)
                .HasDefaultValue(true)
                .HasComment("0 = Order placed by sales person. 1 = Order placed online by customer.");
            entity.Property(e => e.orderdate)
                .HasDefaultValueSql("now()")
                .HasComment("Dates the sales order was created.");
            entity.Property(e => e.purchaseordernumber).HasComment("Customer purchase order number reference.");
            entity.Property(e => e.revisionnumber)
                .HasDefaultValue((short)0)
                .HasComment("Incremental number to track changes to the sales order over time.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.salespersonid).HasComment("Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.");
            entity.Property(e => e.shipdate).HasComment("Date the order was shipped to the customer.");
            entity.Property(e => e.shipmethodid).HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.");
            entity.Property(e => e.shiptoaddressid).HasComment("Customer shipping address. Foreign key to Address.AddressID.");
            entity.Property(e => e.status)
                .HasDefaultValue((short)1)
                .HasComment("Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled");
            entity.Property(e => e.subtotal)
                .HasDefaultValueSql("0.00")
                .HasComment("Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.");
            entity.Property(e => e.taxamt)
                .HasDefaultValueSql("0.00")
                .HasComment("Tax amount.");
            entity.Property(e => e.territoryid).HasComment("Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.");
            entity.Property(e => e.totaldue).HasComment("Total due from customer. Computed as Subtotal + TaxAmt + Freight.");

            entity.HasOne(d => d.billtoaddress).WithMany(p => p.salesorderheaderbilltoaddresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesOrderHeader_Address_BillToAddressID");

            entity.HasOne(d => d.creditcard).WithMany(p => p.salesorderheaders).HasConstraintName("FK_SalesOrderHeader_CreditCard_CreditCardID");

            entity.HasOne(d => d.currencyrate).WithMany(p => p.salesorderheaders).HasConstraintName("FK_SalesOrderHeader_CurrencyRate_CurrencyRateID");

            entity.HasOne(d => d.customer).WithMany(p => p.salesorderheaders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesOrderHeader_Customer_CustomerID");

            entity.HasOne(d => d.salesperson).WithMany(p => p.salesorderheaders).HasConstraintName("FK_SalesOrderHeader_SalesPerson_SalesPersonID");

            entity.HasOne(d => d.shipmethod).WithMany(p => p.salesorderheaders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesOrderHeader_ShipMethod_ShipMethodID");

            entity.HasOne(d => d.shiptoaddress).WithMany(p => p.salesorderheadershiptoaddresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesOrderHeader_Address_ShipToAddressID");

            entity.HasOne(d => d.territory).WithMany(p => p.salesorderheaders).HasConstraintName("FK_SalesOrderHeader_SalesTerritory_TerritoryID");
        });

        modelBuilder.Entity<salesorderheadersalesreason>(entity =>
        {
            entity.HasKey(e => new { e.salesorderid, e.salesreasonid }).HasName("PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID");

            entity.ToTable("salesorderheadersalesreason", "sales", tb => tb.HasComment("Cross-reference table mapping sales orders to sales reason codes."));

            entity.Property(e => e.salesorderid).HasComment("Primary key. Foreign key to SalesOrderHeader.SalesOrderID.");
            entity.Property(e => e.salesreasonid).HasComment("Primary key. Foreign key to SalesReason.SalesReasonID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");

            entity.HasOne(d => d.salesorder).WithMany(p => p.salesorderheadersalesreasons).HasConstraintName("FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID");

            entity.HasOne(d => d.salesreason).WithMany(p => p.salesorderheadersalesreasons)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID");
        });

        modelBuilder.Entity<salesperson>(entity =>
        {
            entity.HasKey(e => e.businessentityid).HasName("PK_SalesPerson_BusinessEntityID");

            entity.ToTable("salesperson", "sales", tb => tb.HasComment("Sales representative current information."));

            entity.Property(e => e.businessentityid)
                .ValueGeneratedNever()
                .HasComment("Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID");
            entity.Property(e => e.bonus)
                .HasDefaultValueSql("0.00")
                .HasComment("Bonus due if quota is met.");
            entity.Property(e => e.commissionpct)
                .HasDefaultValueSql("0.00")
                .HasComment("Commision percent received per sale.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.saleslastyear)
                .HasDefaultValueSql("0.00")
                .HasComment("Sales total of previous year.");
            entity.Property(e => e.salesquota).HasComment("Projected yearly sales.");
            entity.Property(e => e.salesytd)
                .HasDefaultValueSql("0.00")
                .HasComment("Sales total year to date.");
            entity.Property(e => e.territoryid).HasComment("Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.");

            entity.HasOne(d => d.businessentity).WithOne(p => p.salesperson)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPerson_Employee_BusinessEntityID");

            entity.HasOne(d => d.territory).WithMany(p => p.salespeople).HasConstraintName("FK_SalesPerson_SalesTerritory_TerritoryID");
        });

        modelBuilder.Entity<salespersonquotahistory>(entity =>
        {
            entity.HasKey(e => new { e.businessentityid, e.quotadate }).HasName("PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate");

            entity.ToTable("salespersonquotahistory", "sales", tb => tb.HasComment("Sales performance tracking."));

            entity.Property(e => e.businessentityid).HasComment("Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.");
            entity.Property(e => e.quotadate).HasComment("Sales quota date.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.salesquota).HasComment("Sales quota amount.");

            entity.HasOne(d => d.businessentity).WithMany(p => p.salespersonquotahistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID");
        });

        modelBuilder.Entity<salesreason>(entity =>
        {
            entity.HasKey(e => e.salesreasonid).HasName("PK_SalesReason_SalesReasonID");

            entity.ToTable("salesreason", "sales", tb => tb.HasComment("Lookup table of customer purchase reasons."));

            entity.Property(e => e.salesreasonid).HasComment("Primary key for SalesReason records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Sales reason description.");
            entity.Property(e => e.reasontype).HasComment("Category the sales reason belongs to.");
        });

        modelBuilder.Entity<salestaxrate>(entity =>
        {
            entity.HasKey(e => e.salestaxrateid).HasName("PK_SalesTaxRate_SalesTaxRateID");

            entity.ToTable("salestaxrate", "sales", tb => tb.HasComment("Tax rate lookup table."));

            entity.Property(e => e.salestaxrateid).HasComment("Primary key for SalesTaxRate records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Tax rate description.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.stateprovinceid).HasComment("State, province, or country/region the sales tax applies to.");
            entity.Property(e => e.taxrate)
                .HasDefaultValueSql("0.00")
                .HasComment("Tax rate amount.");
            entity.Property(e => e.taxtype).HasComment("1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.");

            entity.HasOne(d => d.stateprovince).WithMany(p => p.salestaxrates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesTaxRate_StateProvince_StateProvinceID");
        });

        modelBuilder.Entity<salesterritory>(entity =>
        {
            entity.HasKey(e => e.territoryid).HasName("PK_SalesTerritory_TerritoryID");

            entity.ToTable("salesterritory", "sales", tb => tb.HasComment("Sales territory lookup table."));

            entity.Property(e => e.territoryid).HasComment("Primary key for SalesTerritory records.");
            entity.Property(e => e.costlastyear)
                .HasDefaultValueSql("0.00")
                .HasComment("Business costs in the territory the previous year.");
            entity.Property(e => e.costytd)
                .HasDefaultValueSql("0.00")
                .HasComment("Business costs in the territory year to date.");
            entity.Property(e => e.countryregioncode).HasComment("ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.");
            entity.Property(e => e.group).HasComment("Geographic area to which the sales territory belong.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Sales territory description");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.saleslastyear)
                .HasDefaultValueSql("0.00")
                .HasComment("Sales in the territory the previous year.");
            entity.Property(e => e.salesytd)
                .HasDefaultValueSql("0.00")
                .HasComment("Sales in the territory year to date.");

            entity.HasOne(d => d.countryregioncodeNavigation).WithMany(p => p.salesterritories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesTerritory_CountryRegion_CountryRegionCode");
        });

        modelBuilder.Entity<salesterritoryhistory>(entity =>
        {
            entity.HasKey(e => new { e.businessentityid, e.startdate, e.territoryid }).HasName("PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID");

            entity.ToTable("salesterritoryhistory", "sales", tb => tb.HasComment("Sales representative transfers to other sales territories."));

            entity.Property(e => e.businessentityid).HasComment("Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.");
            entity.Property(e => e.startdate).HasComment("Primary key. Date the sales representive started work in the territory.");
            entity.Property(e => e.territoryid).HasComment("Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.");
            entity.Property(e => e.enddate).HasComment("Date the sales representative left work in the territory.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");

            entity.HasOne(d => d.businessentity).WithMany(p => p.salesterritoryhistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID");

            entity.HasOne(d => d.territory).WithMany(p => p.salesterritoryhistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesTerritoryHistory_SalesTerritory_TerritoryID");
        });

        modelBuilder.Entity<scrapreason>(entity =>
        {
            entity.HasKey(e => e.scrapreasonid).HasName("PK_ScrapReason_ScrapReasonID");

            entity.ToTable("scrapreason", "production", tb => tb.HasComment("Manufacturing failure reasons lookup table."));

            entity.Property(e => e.scrapreasonid).HasComment("Primary key for ScrapReason records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Failure description.");
        });

        modelBuilder.Entity<shift>(entity =>
        {
            entity.HasKey(e => e.shiftid).HasName("PK_Shift_ShiftID");

            entity.ToTable("shift", "humanresources", tb => tb.HasComment("Work shift lookup table."));

            entity.Property(e => e.shiftid).HasComment("Primary key for Shift records.");
            entity.Property(e => e.endtime).HasComment("Shift end time.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Shift description.");
            entity.Property(e => e.starttime).HasComment("Shift start time.");
        });

        modelBuilder.Entity<shipmethod>(entity =>
        {
            entity.HasKey(e => e.shipmethodid).HasName("PK_ShipMethod_ShipMethodID");

            entity.ToTable("shipmethod", "purchasing", tb => tb.HasComment("Shipping company lookup table."));

            entity.Property(e => e.shipmethodid).HasComment("Primary key for ShipMethod records.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Shipping company name.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.shipbase)
                .HasDefaultValueSql("0.00")
                .HasComment("Minimum shipping charge.");
            entity.Property(e => e.shiprate)
                .HasDefaultValueSql("0.00")
                .HasComment("Shipping charge per pound.");
        });

        modelBuilder.Entity<shoppingcartitem>(entity =>
        {
            entity.HasKey(e => e.shoppingcartitemid).HasName("PK_ShoppingCartItem_ShoppingCartItemID");

            entity.ToTable("shoppingcartitem", "sales", tb => tb.HasComment("Contains online customer orders until the order is submitted or cancelled."));

            entity.Property(e => e.shoppingcartitemid).HasComment("Primary key for ShoppingCartItem records.");
            entity.Property(e => e.datecreated)
                .HasDefaultValueSql("now()")
                .HasComment("Date the time the record was created.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.productid).HasComment("Product ordered. Foreign key to Product.ProductID.");
            entity.Property(e => e.quantity)
                .HasDefaultValue(1)
                .HasComment("Product quantity ordered.");
            entity.Property(e => e.shoppingcartid).HasComment("Shopping cart identification number.");

            entity.HasOne(d => d.product).WithMany(p => p.shoppingcartitems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShoppingCartItem_Product_ProductID");
        });

        modelBuilder.Entity<specialoffer>(entity =>
        {
            entity.HasKey(e => e.specialofferid).HasName("PK_SpecialOffer_SpecialOfferID");

            entity.ToTable("specialoffer", "sales", tb => tb.HasComment("Sale discounts lookup table."));

            entity.Property(e => e.specialofferid).HasComment("Primary key for SpecialOffer records.");
            entity.Property(e => e.category).HasComment("Group the discount applies to such as Reseller or Customer.");
            entity.Property(e => e.description).HasComment("Discount description.");
            entity.Property(e => e.discountpct)
                .HasDefaultValueSql("0.00")
                .HasComment("Discount precentage.");
            entity.Property(e => e.enddate).HasComment("Discount end date.");
            entity.Property(e => e.maxqty).HasComment("Maximum discount percent allowed.");
            entity.Property(e => e.minqty)
                .HasDefaultValue(0)
                .HasComment("Minimum discount percent allowed.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.startdate).HasComment("Discount start date.");
            entity.Property(e => e.type).HasComment("Discount type category.");
        });

        modelBuilder.Entity<specialofferproduct>(entity =>
        {
            entity.HasKey(e => new { e.specialofferid, e.productid }).HasName("PK_SpecialOfferProduct_SpecialOfferID_ProductID");

            entity.ToTable("specialofferproduct", "sales", tb => tb.HasComment("Cross-reference table mapping products to special offer discounts."));

            entity.Property(e => e.specialofferid).HasComment("Primary key for SpecialOfferProduct records.");
            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");

            entity.HasOne(d => d.product).WithMany(p => p.specialofferproducts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpecialOfferProduct_Product_ProductID");

            entity.HasOne(d => d.specialoffer).WithMany(p => p.specialofferproducts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID");
        });

        modelBuilder.Entity<stateprovince>(entity =>
        {
            entity.HasKey(e => e.stateprovinceid).HasName("PK_StateProvince_StateProvinceID");

            entity.ToTable("stateprovince", "person", tb => tb.HasComment("State and province lookup table."));

            entity.Property(e => e.stateprovinceid).HasComment("Primary key for StateProvince records.");
            entity.Property(e => e.countryregioncode).HasComment("ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.");
            entity.Property(e => e.isonlystateprovinceflag)
                .HasDefaultValue(true)
                .HasComment("0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("State or province description.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.stateprovincecode)
                .IsFixedLength()
                .HasComment("ISO standard state or province code.");
            entity.Property(e => e.territoryid).HasComment("ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.");

            entity.HasOne(d => d.countryregioncodeNavigation).WithMany(p => p.stateprovinces)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StateProvince_CountryRegion_CountryRegionCode");

            entity.HasOne(d => d.territory).WithMany(p => p.stateprovinces)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StateProvince_SalesTerritory_TerritoryID");
        });

        modelBuilder.Entity<store>(entity =>
        {
            entity.HasKey(e => e.businessentityid).HasName("PK_Store_BusinessEntityID");

            entity.ToTable("store", "sales", tb => tb.HasComment("Customers (resellers) of Adventure Works products."));

            entity.Property(e => e.businessentityid)
                .ValueGeneratedNever()
                .HasComment("Primary key. Foreign key to Customer.BusinessEntityID.");
            entity.Property(e => e.demographics).HasComment("Demographic informationg about the store such as the number of employees, annual sales and store type.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Name of the store.");
            entity.Property(e => e.rowguid).HasDefaultValueSql("uuid_generate_v1()");
            entity.Property(e => e.salespersonid).HasComment("ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.");

            entity.HasOne(d => d.businessentity).WithOne(p => p.store)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Store_BusinessEntity_BusinessEntityID");

            entity.HasOne(d => d.salesperson).WithMany(p => p.stores).HasConstraintName("FK_Store_SalesPerson_SalesPersonID");
        });

        modelBuilder.Entity<transactionhistory>(entity =>
        {
            entity.HasKey(e => e.transactionid).HasName("PK_TransactionHistory_TransactionID");

            entity.ToTable("transactionhistory", "production", tb => tb.HasComment("Record of each purchase order, sales order, or work order transaction year to date."));

            entity.Property(e => e.transactionid).HasComment("Primary key for TransactionHistory records.");
            entity.Property(e => e.actualcost).HasComment("Product cost.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.quantity).HasComment("Product quantity.");
            entity.Property(e => e.referenceorderid).HasComment("Purchase order, sales order, or work order identification number.");
            entity.Property(e => e.referenceorderlineid)
                .HasDefaultValue(0)
                .HasComment("Line number associated with the purchase order, sales order, or work order.");
            entity.Property(e => e.transactiondate)
                .HasDefaultValueSql("now()")
                .HasComment("Date and time of the transaction.");
            entity.Property(e => e.transactiontype).HasComment("W = WorkOrder, S = SalesOrder, P = PurchaseOrder");

            entity.HasOne(d => d.product).WithMany(p => p.transactionhistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransactionHistory_Product_ProductID");
        });

        modelBuilder.Entity<transactionhistoryarchive>(entity =>
        {
            entity.HasKey(e => e.transactionid).HasName("PK_TransactionHistoryArchive_TransactionID");

            entity.ToTable("transactionhistoryarchive", "production", tb => tb.HasComment("Transactions for previous years."));

            entity.Property(e => e.transactionid)
                .ValueGeneratedNever()
                .HasComment("Primary key for TransactionHistoryArchive records.");
            entity.Property(e => e.actualcost).HasComment("Product cost.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.quantity).HasComment("Product quantity.");
            entity.Property(e => e.referenceorderid).HasComment("Purchase order, sales order, or work order identification number.");
            entity.Property(e => e.referenceorderlineid)
                .HasDefaultValue(0)
                .HasComment("Line number associated with the purchase order, sales order, or work order.");
            entity.Property(e => e.transactiondate)
                .HasDefaultValueSql("now()")
                .HasComment("Date and time of the transaction.");
            entity.Property(e => e.transactiontype).HasComment("W = Work Order, S = Sales Order, P = Purchase Order");
        });

        modelBuilder.Entity<unitmeasure>(entity =>
        {
            entity.HasKey(e => e.unitmeasurecode).HasName("PK_UnitMeasure_UnitMeasureCode");

            entity.ToTable("unitmeasure", "production", tb => tb.HasComment("Unit of measure lookup table."));

            entity.Property(e => e.unitmeasurecode)
                .IsFixedLength()
                .HasComment("Primary key.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Unit of measure description.");
        });

        modelBuilder.Entity<vendor>(entity =>
        {
            entity.HasKey(e => e.businessentityid).HasName("PK_Vendor_BusinessEntityID");

            entity.ToTable("vendor", "purchasing", tb => tb.HasComment("Companies from whom Adventure Works Cycles purchases parts or other goods."));

            entity.Property(e => e.businessentityid)
                .ValueGeneratedNever()
                .HasComment("Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID");
            entity.Property(e => e.accountnumber).HasComment("Vendor account (identification) number.");
            entity.Property(e => e.activeflag)
                .HasDefaultValue(true)
                .HasComment("0 = Vendor no longer used. 1 = Vendor is actively used.");
            entity.Property(e => e.creditrating).HasComment("1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.name).HasComment("Company name.");
            entity.Property(e => e.preferredvendorstatus)
                .HasDefaultValue(true)
                .HasComment("0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.");
            entity.Property(e => e.purchasingwebserviceurl).HasComment("Vendor URL.");

            entity.HasOne(d => d.businessentity).WithOne(p => p.vendor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vendor_BusinessEntity_BusinessEntityID");
        });

        modelBuilder.Entity<workorder>(entity =>
        {
            entity.HasKey(e => e.workorderid).HasName("PK_WorkOrder_WorkOrderID");

            entity.ToTable("workorder", "production", tb => tb.HasComment("Manufacturing work orders."));

            entity.Property(e => e.workorderid).HasComment("Primary key for WorkOrder records.");
            entity.Property(e => e.duedate).HasComment("Work order due date.");
            entity.Property(e => e.enddate).HasComment("Work order end date.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.orderqty).HasComment("Product quantity to build.");
            entity.Property(e => e.productid).HasComment("Product identification number. Foreign key to Product.ProductID.");
            entity.Property(e => e.scrappedqty).HasComment("Quantity that failed inspection.");
            entity.Property(e => e.scrapreasonid).HasComment("Reason for inspection failure.");
            entity.Property(e => e.startdate).HasComment("Work order start date.");

            entity.HasOne(d => d.product).WithMany(p => p.workorders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WorkOrder_Product_ProductID");

            entity.HasOne(d => d.scrapreason).WithMany(p => p.workorders).HasConstraintName("FK_WorkOrder_ScrapReason_ScrapReasonID");
        });

        modelBuilder.Entity<workorderrouting>(entity =>
        {
            entity.HasKey(e => new { e.workorderid, e.productid, e.operationsequence }).HasName("PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence");

            entity.ToTable("workorderrouting", "production", tb => tb.HasComment("Work order details."));

            entity.Property(e => e.workorderid).HasComment("Primary key. Foreign key to WorkOrder.WorkOrderID.");
            entity.Property(e => e.productid).HasComment("Primary key. Foreign key to Product.ProductID.");
            entity.Property(e => e.operationsequence).HasComment("Primary key. Indicates the manufacturing process sequence.");
            entity.Property(e => e.actualcost).HasComment("Actual manufacturing cost.");
            entity.Property(e => e.actualenddate).HasComment("Actual end date.");
            entity.Property(e => e.actualresourcehrs).HasComment("Number of manufacturing hours used.");
            entity.Property(e => e.actualstartdate).HasComment("Actual start date.");
            entity.Property(e => e.locationid).HasComment("Manufacturing location where the part is processed. Foreign key to Location.LocationID.");
            entity.Property(e => e.modifieddate).HasDefaultValueSql("now()");
            entity.Property(e => e.plannedcost).HasComment("Estimated manufacturing cost.");
            entity.Property(e => e.scheduledenddate).HasComment("Planned manufacturing end date.");
            entity.Property(e => e.scheduledstartdate).HasComment("Planned manufacturing start date.");

            entity.HasOne(d => d.location).WithMany(p => p.workorderroutings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WorkOrderRouting_Location_LocationID");

            entity.HasOne(d => d.workorder).WithMany(p => p.workorderroutings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WorkOrderRouting_WorkOrder_WorkOrderID");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}